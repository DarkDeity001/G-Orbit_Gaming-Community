{"ast":null,"code":"import { Observable, of, from } from 'rxjs';\nimport { debounceTime, map, switchMap, tap } from 'rxjs/operators';\nimport * as i1 from '@angular/fire';\nimport { observeOutsideAngular, keepUnstableUntilFirst, VERSION } from '@angular/fire';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, PLATFORM_ID, Injectable, Inject, Optional, Pipe, NgModule } from '@angular/core';\nimport { ɵfirebaseAppFactory, ɵcacheInstance, FIREBASE_OPTIONS, FIREBASE_APP_NAME } from '@angular/fire/compat';\nimport 'firebase/compat/storage';\nimport * as i2 from '@angular/fire/app-check';\nimport { AsyncPipe } from '@angular/common';\nimport * as i2$1 from '@angular/platform-browser';\nimport { makeStateKey } from '@angular/platform-browser';\nimport firebase from 'firebase/compat/app';\n\n// Things aren't working great, I'm having to put in a lot of work-arounds for what\n// appear to be Firebase JS SDK bugs https://github.com/firebase/firebase-js-sdk/issues/4158\nfunction fromTask(task) {\n  return new Observable(subscriber => {\n    const progress = snap => subscriber.next(snap);\n    const error = e => subscriber.error(e);\n    const complete = () => subscriber.complete();\n    // emit the current snapshot, so they don't have to wait for state_changes\n    // to fire next... this is stale if the task is no longer running :(\n    progress(task.snapshot);\n    const unsub = task.on('state_changed', progress);\n    // it turns out that neither task snapshot nor 'state_changed' fire the last\n    // snapshot before completion, the one with status 'success\" and 100% progress\n    // so let's use the promise form of the task for that\n    task.then(snapshot => {\n      progress(snapshot);\n      complete();\n    }, e => {\n      // TODO investigate, again this is stale, we never fire a canceled or error it seems\n      progress(task.snapshot);\n      error(e);\n    });\n    // on's type if Function, rather than () => void, need to wrap\n    return function unsubscribe() {\n      unsub();\n    };\n  }).pipe(\n  // deal with sync emissions from first emitting `task.snapshot`, this makes sure\n  // that if the task is already finished we don't emit the old running state\n  debounceTime(0));\n}\n\n/**\n * Create an AngularFireUploadTask from a regular UploadTask from the Storage SDK.\n * This method creates an observable of the upload and returns on object that provides\n * multiple methods for controlling and monitoring the file upload.\n */\nfunction createUploadTask(task) {\n  const inner$ = fromTask(task);\n  return {\n    task,\n    then: task.then.bind(task),\n    catch: task.catch.bind(task),\n    pause: task.pause.bind(task),\n    cancel: task.cancel.bind(task),\n    resume: task.resume.bind(task),\n    snapshotChanges: () => inner$,\n    percentageChanges: () => inner$.pipe(map(s => s.bytesTransferred / s.totalBytes * 100))\n  };\n}\n\n/**\n * Create an AngularFire wrapped Storage Reference. This object\n * creates observable methods from promise based methods.\n */\nfunction createStorageRef(ref) {\n  return {\n    getDownloadURL: () => of(undefined).pipe(observeOutsideAngular, switchMap(() => ref.getDownloadURL()), keepUnstableUntilFirst),\n    getMetadata: () => of(undefined).pipe(observeOutsideAngular, switchMap(() => ref.getMetadata()), keepUnstableUntilFirst),\n    delete: () => from(ref.delete()),\n    child: path => createStorageRef(ref.child(path)),\n    updateMetadata: meta => from(ref.updateMetadata(meta)),\n    put: (data, metadata) => {\n      const task = ref.put(data, metadata);\n      return createUploadTask(task);\n    },\n    putString: (data, format, metadata) => {\n      const task = ref.putString(data, format, metadata);\n      return createUploadTask(task);\n    },\n    list: options => from(ref.list(options)),\n    listAll: () => from(ref.listAll())\n  };\n}\nconst BUCKET = new InjectionToken('angularfire2.storageBucket');\nconst MAX_UPLOAD_RETRY_TIME = new InjectionToken('angularfire2.storage.maxUploadRetryTime');\nconst MAX_OPERATION_RETRY_TIME = new InjectionToken('angularfire2.storage.maxOperationRetryTime');\nconst USE_EMULATOR = new InjectionToken('angularfire2.storage.use-emulator');\n/**\n * AngularFireStorage Service\n *\n * This service is the main entry point for this feature module. It provides\n * an API for uploading and downloading binary files from Cloud Storage for\n * Firebase.\n */\nclass AngularFireStorage {\n  constructor(options, name, storageBucket,\n  // tslint:disable-next-line:ban-types\n  platformId, zone, schedulers, maxUploadRetryTime, maxOperationRetryTime, _useEmulator, _appCheckInstances) {\n    const app = ɵfirebaseAppFactory(options, zone, name);\n    this.storage = ɵcacheInstance(`${app.name}.storage.${storageBucket}`, 'AngularFireStorage', app.name, () => {\n      const storage = zone.runOutsideAngular(() => app.storage(storageBucket || undefined));\n      const useEmulator = _useEmulator;\n      if (useEmulator) {\n        storage.useEmulator(...useEmulator);\n      }\n      if (maxUploadRetryTime) {\n        storage.setMaxUploadRetryTime(maxUploadRetryTime);\n      }\n      if (maxOperationRetryTime) {\n        storage.setMaxOperationRetryTime(maxOperationRetryTime);\n      }\n      return storage;\n    }, [maxUploadRetryTime, maxOperationRetryTime]);\n  }\n  ref(path) {\n    return createStorageRef(this.storage.ref(path));\n  }\n  refFromURL(path) {\n    return createStorageRef(this.storage.refFromURL(path));\n  }\n  upload(path, data, metadata) {\n    const storageRef = this.storage.ref(path);\n    const ref = createStorageRef(storageRef);\n    return ref.put(data, metadata);\n  }\n}\nAngularFireStorage.ɵfac = function AngularFireStorage_Factory(t) {\n  return new (t || AngularFireStorage)(i0.ɵɵinject(FIREBASE_OPTIONS), i0.ɵɵinject(FIREBASE_APP_NAME, 8), i0.ɵɵinject(BUCKET, 8), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.ɵAngularFireSchedulers), i0.ɵɵinject(MAX_UPLOAD_RETRY_TIME, 8), i0.ɵɵinject(MAX_OPERATION_RETRY_TIME, 8), i0.ɵɵinject(USE_EMULATOR, 8), i0.ɵɵinject(i2.AppCheckInstances, 8));\n};\nAngularFireStorage.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AngularFireStorage,\n  factory: AngularFireStorage.ɵfac,\n  providedIn: 'any'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AngularFireStorage, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'any'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [FIREBASE_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [FIREBASE_APP_NAME]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [BUCKET]\n      }]\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i1.ɵAngularFireSchedulers\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAX_UPLOAD_RETRY_TIME]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAX_OPERATION_RETRY_TIME]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [USE_EMULATOR]\n      }]\n    }, {\n      type: i2.AppCheckInstances,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\n/** to be used with in combination with | async */\nclass GetDownloadURLPipe {\n  constructor(storage, cdr, state) {\n    this.storage = storage;\n    this.state = state;\n    this.asyncPipe = new AsyncPipe(cdr);\n  }\n  transform(path) {\n    var _a;\n    if (path !== this.path) {\n      this.path = path;\n      const key = makeStateKey(`|getDownloadURL|${path}`);\n      const existing = (_a = this.state) === null || _a === void 0 ? void 0 : _a.get(key, undefined);\n      this.downloadUrl$ = existing ? of(existing) : this.storage.ref(path).getDownloadURL().pipe(tap(it => {\n        var _a;\n        return (_a = this.state) === null || _a === void 0 ? void 0 : _a.set(key, it);\n      }));\n    }\n    return this.asyncPipe.transform(this.downloadUrl$);\n  }\n  ngOnDestroy() {\n    this.asyncPipe.ngOnDestroy();\n  }\n}\nGetDownloadURLPipe.ɵfac = function GetDownloadURLPipe_Factory(t) {\n  return new (t || GetDownloadURLPipe)(i0.ɵɵdirectiveInject(AngularFireStorage, 16), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef, 16), i0.ɵɵdirectiveInject(i2$1.TransferState, 24));\n};\nGetDownloadURLPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"getDownloadURL\",\n  type: GetDownloadURLPipe,\n  pure: false\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GetDownloadURLPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'getDownloadURL',\n      pure: false\n    }]\n  }], function () {\n    return [{\n      type: AngularFireStorage\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i2$1.TransferState,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\nclass GetDownloadURLPipeModule {}\nGetDownloadURLPipeModule.ɵfac = function GetDownloadURLPipeModule_Factory(t) {\n  return new (t || GetDownloadURLPipeModule)();\n};\nGetDownloadURLPipeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: GetDownloadURLPipeModule\n});\nGetDownloadURLPipeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GetDownloadURLPipeModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [GetDownloadURLPipe],\n      exports: [GetDownloadURLPipe]\n    }]\n  }], null, null);\n})();\nclass AngularFireStorageModule {\n  constructor() {\n    firebase.registerVersion('angularfire', VERSION.full, 'gcs-compat');\n  }\n}\nAngularFireStorageModule.ɵfac = function AngularFireStorageModule_Factory(t) {\n  return new (t || AngularFireStorageModule)();\n};\nAngularFireStorageModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AngularFireStorageModule\n});\nAngularFireStorageModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [AngularFireStorage],\n  imports: [GetDownloadURLPipeModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AngularFireStorageModule, [{\n    type: NgModule,\n    args: [{\n      exports: [GetDownloadURLPipeModule],\n      providers: [AngularFireStorage]\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AngularFireStorage, AngularFireStorageModule, BUCKET, GetDownloadURLPipe, GetDownloadURLPipeModule, MAX_OPERATION_RETRY_TIME, MAX_UPLOAD_RETRY_TIME, USE_EMULATOR, createStorageRef, createUploadTask, fromTask };","map":{"version":3,"names":["Observable","of","from","debounceTime","map","switchMap","tap","i1","observeOutsideAngular","keepUnstableUntilFirst","VERSION","i0","InjectionToken","PLATFORM_ID","Injectable","Inject","Optional","Pipe","NgModule","ɵfirebaseAppFactory","ɵcacheInstance","FIREBASE_OPTIONS","FIREBASE_APP_NAME","i2","AsyncPipe","i2$1","makeStateKey","firebase","fromTask","task","subscriber","progress","snap","next","error","e","complete","snapshot","unsub","on","then","unsubscribe","pipe","createUploadTask","inner$","bind","catch","pause","cancel","resume","snapshotChanges","percentageChanges","s","bytesTransferred","totalBytes","createStorageRef","ref","getDownloadURL","undefined","getMetadata","delete","child","path","updateMetadata","meta","put","data","metadata","putString","format","list","options","listAll","BUCKET","MAX_UPLOAD_RETRY_TIME","MAX_OPERATION_RETRY_TIME","USE_EMULATOR","AngularFireStorage","constructor","name","storageBucket","platformId","zone","schedulers","maxUploadRetryTime","maxOperationRetryTime","_useEmulator","_appCheckInstances","app","storage","runOutsideAngular","useEmulator","setMaxUploadRetryTime","setMaxOperationRetryTime","refFromURL","upload","storageRef","ɵfac","AngularFireStorage_Factory","t","ɵɵinject","NgZone","ɵAngularFireSchedulers","AppCheckInstances","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ɵsetClassMetadata","type","args","decorators","Object","GetDownloadURLPipe","cdr","state","asyncPipe","transform","_a","key","existing","get","downloadUrl$","it","set","ngOnDestroy","GetDownloadURLPipe_Factory","ɵɵdirectiveInject","ChangeDetectorRef","TransferState","ɵpipe","ɵɵdefinePipe","pure","GetDownloadURLPipeModule","GetDownloadURLPipeModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","declarations","exports","AngularFireStorageModule","registerVersion","full","AngularFireStorageModule_Factory","providers","imports"],"sources":["D:/Gamer`s Orbit/clips/node_modules/@angular/fire/fesm2015/angular-fire-compat-storage.js"],"sourcesContent":["import { Observable, of, from } from 'rxjs';\nimport { debounceTime, map, switchMap, tap } from 'rxjs/operators';\nimport * as i1 from '@angular/fire';\nimport { observeOutsideAngular, keepUnstableUntilFirst, VERSION } from '@angular/fire';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, PLATFORM_ID, Injectable, Inject, Optional, Pipe, NgModule } from '@angular/core';\nimport { ɵfirebaseAppFactory, ɵcacheInstance, FIREBASE_OPTIONS, FIREBASE_APP_NAME } from '@angular/fire/compat';\nimport 'firebase/compat/storage';\nimport * as i2 from '@angular/fire/app-check';\nimport { AsyncPipe } from '@angular/common';\nimport * as i2$1 from '@angular/platform-browser';\nimport { makeStateKey } from '@angular/platform-browser';\nimport firebase from 'firebase/compat/app';\n\n// Things aren't working great, I'm having to put in a lot of work-arounds for what\n// appear to be Firebase JS SDK bugs https://github.com/firebase/firebase-js-sdk/issues/4158\nfunction fromTask(task) {\n    return new Observable(subscriber => {\n        const progress = (snap) => subscriber.next(snap);\n        const error = e => subscriber.error(e);\n        const complete = () => subscriber.complete();\n        // emit the current snapshot, so they don't have to wait for state_changes\n        // to fire next... this is stale if the task is no longer running :(\n        progress(task.snapshot);\n        const unsub = task.on('state_changed', progress);\n        // it turns out that neither task snapshot nor 'state_changed' fire the last\n        // snapshot before completion, the one with status 'success\" and 100% progress\n        // so let's use the promise form of the task for that\n        task.then(snapshot => {\n            progress(snapshot);\n            complete();\n        }, e => {\n            // TODO investigate, again this is stale, we never fire a canceled or error it seems\n            progress(task.snapshot);\n            error(e);\n        });\n        // on's type if Function, rather than () => void, need to wrap\n        return function unsubscribe() {\n            unsub();\n        };\n    }).pipe(\n    // deal with sync emissions from first emitting `task.snapshot`, this makes sure\n    // that if the task is already finished we don't emit the old running state\n    debounceTime(0));\n}\n\n/**\n * Create an AngularFireUploadTask from a regular UploadTask from the Storage SDK.\n * This method creates an observable of the upload and returns on object that provides\n * multiple methods for controlling and monitoring the file upload.\n */\nfunction createUploadTask(task) {\n    const inner$ = fromTask(task);\n    return {\n        task,\n        then: task.then.bind(task),\n        catch: task.catch.bind(task),\n        pause: task.pause.bind(task),\n        cancel: task.cancel.bind(task),\n        resume: task.resume.bind(task),\n        snapshotChanges: () => inner$,\n        percentageChanges: () => inner$.pipe(map(s => s.bytesTransferred / s.totalBytes * 100))\n    };\n}\n\n/**\n * Create an AngularFire wrapped Storage Reference. This object\n * creates observable methods from promise based methods.\n */\nfunction createStorageRef(ref) {\n    return {\n        getDownloadURL: () => of(undefined).pipe(observeOutsideAngular, switchMap(() => ref.getDownloadURL()), keepUnstableUntilFirst),\n        getMetadata: () => of(undefined).pipe(observeOutsideAngular, switchMap(() => ref.getMetadata()), keepUnstableUntilFirst),\n        delete: () => from(ref.delete()),\n        child: (path) => createStorageRef(ref.child(path)),\n        updateMetadata: (meta) => from(ref.updateMetadata(meta)),\n        put: (data, metadata) => {\n            const task = ref.put(data, metadata);\n            return createUploadTask(task);\n        },\n        putString: (data, format, metadata) => {\n            const task = ref.putString(data, format, metadata);\n            return createUploadTask(task);\n        },\n        list: (options) => from(ref.list(options)),\n        listAll: () => from(ref.listAll())\n    };\n}\n\nconst BUCKET = new InjectionToken('angularfire2.storageBucket');\nconst MAX_UPLOAD_RETRY_TIME = new InjectionToken('angularfire2.storage.maxUploadRetryTime');\nconst MAX_OPERATION_RETRY_TIME = new InjectionToken('angularfire2.storage.maxOperationRetryTime');\nconst USE_EMULATOR = new InjectionToken('angularfire2.storage.use-emulator');\n/**\n * AngularFireStorage Service\n *\n * This service is the main entry point for this feature module. It provides\n * an API for uploading and downloading binary files from Cloud Storage for\n * Firebase.\n */\nclass AngularFireStorage {\n    constructor(options, name, storageBucket, \n    // tslint:disable-next-line:ban-types\n    platformId, zone, schedulers, maxUploadRetryTime, maxOperationRetryTime, _useEmulator, _appCheckInstances) {\n        const app = ɵfirebaseAppFactory(options, zone, name);\n        this.storage = ɵcacheInstance(`${app.name}.storage.${storageBucket}`, 'AngularFireStorage', app.name, () => {\n            const storage = zone.runOutsideAngular(() => app.storage(storageBucket || undefined));\n            const useEmulator = _useEmulator;\n            if (useEmulator) {\n                storage.useEmulator(...useEmulator);\n            }\n            if (maxUploadRetryTime) {\n                storage.setMaxUploadRetryTime(maxUploadRetryTime);\n            }\n            if (maxOperationRetryTime) {\n                storage.setMaxOperationRetryTime(maxOperationRetryTime);\n            }\n            return storage;\n        }, [maxUploadRetryTime, maxOperationRetryTime]);\n    }\n    ref(path) {\n        return createStorageRef(this.storage.ref(path));\n    }\n    refFromURL(path) {\n        return createStorageRef(this.storage.refFromURL(path));\n    }\n    upload(path, data, metadata) {\n        const storageRef = this.storage.ref(path);\n        const ref = createStorageRef(storageRef);\n        return ref.put(data, metadata);\n    }\n}\nAngularFireStorage.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireStorage, deps: [{ token: FIREBASE_OPTIONS }, { token: FIREBASE_APP_NAME, optional: true }, { token: BUCKET, optional: true }, { token: PLATFORM_ID }, { token: i0.NgZone }, { token: i1.ɵAngularFireSchedulers }, { token: MAX_UPLOAD_RETRY_TIME, optional: true }, { token: MAX_OPERATION_RETRY_TIME, optional: true }, { token: USE_EMULATOR, optional: true }, { token: i2.AppCheckInstances, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nAngularFireStorage.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireStorage, providedIn: 'any' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireStorage, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'any'\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [FIREBASE_OPTIONS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [FIREBASE_APP_NAME]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [BUCKET]\n                }] }, { type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: i0.NgZone }, { type: i1.ɵAngularFireSchedulers }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAX_UPLOAD_RETRY_TIME]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAX_OPERATION_RETRY_TIME]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [USE_EMULATOR]\n                }] }, { type: i2.AppCheckInstances, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/** to be used with in combination with | async */\nclass GetDownloadURLPipe {\n    constructor(storage, cdr, state) {\n        this.storage = storage;\n        this.state = state;\n        this.asyncPipe = new AsyncPipe(cdr);\n    }\n    transform(path) {\n        var _a;\n        if (path !== this.path) {\n            this.path = path;\n            const key = makeStateKey(`|getDownloadURL|${path}`);\n            const existing = (_a = this.state) === null || _a === void 0 ? void 0 : _a.get(key, undefined);\n            this.downloadUrl$ = existing ? of(existing) : this.storage.ref(path).getDownloadURL().pipe(tap(it => { var _a; return (_a = this.state) === null || _a === void 0 ? void 0 : _a.set(key, it); }));\n        }\n        return this.asyncPipe.transform(this.downloadUrl$);\n    }\n    ngOnDestroy() {\n        this.asyncPipe.ngOnDestroy();\n    }\n}\nGetDownloadURLPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: GetDownloadURLPipe, deps: [{ token: AngularFireStorage }, { token: i0.ChangeDetectorRef }, { token: i2$1.TransferState, optional: true }], target: i0.ɵɵFactoryTarget.Pipe });\nGetDownloadURLPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: GetDownloadURLPipe, name: \"getDownloadURL\", pure: false });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: GetDownloadURLPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'getDownloadURL',\n                    pure: false,\n                }]\n        }], ctorParameters: function () { return [{ type: AngularFireStorage }, { type: i0.ChangeDetectorRef }, { type: i2$1.TransferState, decorators: [{\n                    type: Optional\n                }] }]; } });\nclass GetDownloadURLPipeModule {\n}\nGetDownloadURLPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: GetDownloadURLPipeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nGetDownloadURLPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: GetDownloadURLPipeModule, declarations: [GetDownloadURLPipe], exports: [GetDownloadURLPipe] });\nGetDownloadURLPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: GetDownloadURLPipeModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: GetDownloadURLPipeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [GetDownloadURLPipe],\n                    exports: [GetDownloadURLPipe],\n                }]\n        }] });\n\nclass AngularFireStorageModule {\n    constructor() {\n        firebase.registerVersion('angularfire', VERSION.full, 'gcs-compat');\n    }\n}\nAngularFireStorageModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireStorageModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAngularFireStorageModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireStorageModule, exports: [GetDownloadURLPipeModule] });\nAngularFireStorageModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireStorageModule, providers: [AngularFireStorage], imports: [GetDownloadURLPipeModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireStorageModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [GetDownloadURLPipeModule],\n                    providers: [AngularFireStorage]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AngularFireStorage, AngularFireStorageModule, BUCKET, GetDownloadURLPipe, GetDownloadURLPipeModule, MAX_OPERATION_RETRY_TIME, MAX_UPLOAD_RETRY_TIME, USE_EMULATOR, createStorageRef, createUploadTask, fromTask };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}