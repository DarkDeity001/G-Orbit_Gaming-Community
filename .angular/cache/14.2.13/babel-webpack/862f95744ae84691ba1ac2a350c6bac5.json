{"ast":null,"code":"import _asyncToGenerator from \"D:/Gamer`s Orbit/clips/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { switchMap, map } from 'rxjs/operators';\nimport { of, combineLatest } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nimport * as i2 from \"@angular/fire/compat/auth\";\nimport * as i3 from \"@angular/fire/compat/storage\";\nexport let ClipService = /*#__PURE__*/(() => {\n  class ClipService {\n    constructor(db, auth, storage) {\n      this.db = db;\n      this.auth = auth;\n      this.storage = storage;\n      this.clipsCollection = db.collection('clips');\n    }\n\n    createClip(data) {\n      return this.clipsCollection.add(data);\n    }\n\n    getUserClips(sort$) {\n      return combineLatest([this.auth.user, sort$]).pipe(switchMap(values => {\n        const [user, sort] = values;\n\n        if (!user) {\n          return of([]);\n        }\n\n        const query = this.clipsCollection.ref.where('uid', '==', user.uid).orderBy('timestamp', sort === '1' ? 'desc' : 'asc');\n        return query.get();\n      }), map(snapshot => snapshot.docs));\n    }\n\n    updateClip(id, title) {\n      return this.clipsCollection.doc(id).update({\n        title\n      });\n    }\n\n    deleteClip(clip) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const clipRef = _this.storage.ref(`clips/${clip.fileName}`);\n\n        yield clipRef.delete();\n        yield _this.clipsCollection.doc(clip.docID).delete();\n      })();\n    }\n\n  }\n\n  ClipService.ɵfac = function ClipService_Factory(t) {\n    return new (t || ClipService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.AngularFireAuth), i0.ɵɵinject(i3.AngularFireStorage));\n  };\n\n  ClipService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ClipService,\n    factory: ClipService.ɵfac,\n    providedIn: 'root'\n  });\n  return ClipService;\n})();","map":null,"metadata":{},"sourceType":"module"}